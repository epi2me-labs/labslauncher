stages:
    - test
    - build
    - push

test:
    image: ${IMAGE}:16.04
    stage: test
    tags:
        - linux
    before_script:
        - export DEBIAN_FRONTEND=noninteractive
        - apt-get update -qq && apt-get install -y -qq
          python-virtualenv python3-dev
    script:
        - PYTHON=python3 make test

###
# Windows
#
.build-win: &build-win
    stage: build
    tags:
        - epi2melabs-win

build-win-colab:
    <<: *build-win
    variables:
        NOCOLAB: 0
    script:
        - .\winbuild.ps1
        - Move-Item dist/epi2melabs-installer.exe "ont-epi2melabs-installer-${CI_COMMIT_REF_NAME}-win10.exe"
    artifacts:
        paths:
            - "ont-epi2melabs-installer-$CI_COMMIT_REF_NAME-win10.exe"

###
# macos
# #
.build-macos: &build-macos
    stage: build
    tags:
        - macos
        - oxford

build-macos-colab:
    <<: *build-macos
    variables:
        NOCOLAB: 0
    script:
        - PYTHON=$(PYENV_VERSION=3.6.11 pyenv which python) make build
        - cd dist; zip -r ../ont-epi2melabs-launcher-${CI_COMMIT_REF_NAME}-macos.app.zip EPI2ME-Labs-Launcher.app
    artifacts:
        paths:
            - "ont-epi2melabs-launcher-${CI_COMMIT_REF_NAME}-macos.app.zip"

###
# Ubuntu
#
.build-ubuntu: &build-ubuntu
    image: ${IMAGEUSED}
    stage: build
    tags:
        - linux
    script:
        - export DEBIAN_FRONTEND=noninteractive
        - apt-get update -qq && apt-get install -y -qq
          build-essential wget fakeroot rsync ssh python-virtualenv python3-dev
          xvfb libx11-xcb1 libxext6 libxrender1 libxcb-xinerama0
          libsm6 libice6 libglib2.0-0
        - PYTHON=python3 make deb
        - dpkg -I ont-epi2melabs-launcher*.deb
    artifacts:
        paths:
            - "ont-epi2melabs-launcher*.deb"
    except:
        - tags

.setup-tag: &tag-package-check
    before_script:
        - IFS='.' read -ra PARTS <<< "${CI_COMMIT_TAG}"
        - export MAJOR=${PARTS[0]:1}
        - export MINOR=${PARTS[1]}
        - export SUB=${PARTS[2]}
        - export PACKVER="$MAJOR.$MINOR.$SUB"
        # check the version in the python package matches the tag
        - PYVER=$(grep "__version__ = " labslauncher/__init__.py | awk '{gsub("\"","",$3); print $3}')
        - echo "PACKVER='$PACKVER'   PYVER='$PYVER'"
        - if [[ "$PYVER" != "$PACKVER" ]]; then echo "Mismatching TAG and PACKAGE versions"; exit 1; else echo "TAG and PACKAGE versions agree."; fi
        - echo -e "\e[1m\e[34mTagging with '\e[35m$MAJOR.$MINOR.$SUB\e[34m'\e[0m"
    only:
        - /^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$/
    except:
        - branches

.xenial-colab: &xenial-colab
    <<: *build-ubuntu
    variables:
        IMAGEUSED: ${IMAGE}:16.04
        NOCOLAB: 0

.bionic-colab: &bionic-colab
    <<: *build-ubuntu
    variables:
        IMAGEUSED: ${IMAGE}:18.04
        NOCOLAB: 0

# branches
xenial-deb-colab:
    <<: *xenial-colab
bionic-deb-colab:
    <<: *bionic-colab

# tags
xenial-tag-colab:
    <<: *xenial-colab
    <<: *tag-package-check
bionic-tag-colab:
    <<: *bionic-colab
    <<: *tag-package-check

###
# Centos
#
.build-centos: &build-centos
    image: ${IMAGEUSED}
    stage: build
    tags:
        - linux
    script:
        - yum install -y python3 wget make mesa-libGL
          fontconfig freetype freetype-devel fontconfig-devel libstdc++ 
          xcb-util-wm xcb-util-image xcb-util-renderutil libxkbcommon libxkbcommon-x11
          rpm-build rpm-devel rpmdevtools chrpath 
        - wget https://bootstrap.pypa.io/get-pip.py
        - python3 ./get-pip.py
        - pip install virtualenv
        - PYTHON=python3 make rpm
        - mv /root/rpmbuild/RPMS/x86_64/ont-epi2melabs-launcher*.rpm .
    artifacts:
        paths:
            - "ont-epi2melabs-launcher*.rpm"
    except:
        - tags

.centos7: &centos7
    <<: *build-centos
    variables:
        IMAGEUSED: centos:centos7
        NOCOLAB: 0

.centos8: &centos8
    <<: *build-centos
    variables:
        IMAGEUSED: centos:centos8
        NOCOLAB: 0

# branches
centos7-rpm:
    <<: *centos7
centos8-rpm:
    <<: *centos8

# tags
centos7-tag:
    <<: *centos7
    <<: *tag-package-check
centos8-tag:
    <<: *centos8
    <<: *tag-package-check


###
# Push
#

bundle:
    stage: push
    script:
        - echo "Just gathering artifacts in one place"
    artifacts:
        paths:
            - "ont-epi2melabs-installer-*-win10.exe"
            - "ont-epi2melabs-launcher-*.deb"
            - "ont-epi2melabs-launcher-*-macos.app.zip"
            - "ont-epi2melabs-launcher-*.x86_64.rpm"


push-github:
    stage: push
    before_script:
        - apt-get update -qq && apt-get install -y -qq git python3-pip
        - mkdir ~/.ssh/
        - cp $LABS_BOT_GH_KEY ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
        - echo -e "Host github.com\n\tStrictHostKeyChecking no\n\tHostname ssh.github.com\n\tPort 443\n\n" > ~/.ssh/config
        - git config --global user.email "epi2melabs@nanoporetech.com"
        - git config --global user.name "epi2melabs-bot"
    script:
        # Push master and tag to github
        - git remote add ont ${CI_REPOSITORY_URL} || true
        - git remote add github git@github.com:epi2me-labs/${CI_PROJECT_NAME}.git || true
        - git fetch ont dev --tags
        - git fetch ont master
        - git fetch github master
        - git checkout --track github/master || git checkout master
        - git merge ${CI_COMMIT_TAG}
        - git push github master
        - git push github ${CI_COMMIT_TAG}
        # Make a github release page
        - git clone https://github.com/epi2me-labs/github_release
        - pip3 install -r github_release/requirements.txt
        - github_release/make_release ${CI_PROJECT_NAME} ${CI_COMMIT_TAG} CHANGELOG.md ${LABS_BOT_GH_TOKEN}
          --artifacts ont-epi2melabs-installer-*-win10.exe ont-epi2melabs-launcher-*.deb ont-epi2melabs-launcher-*-macos.app.zip
    only:
        - tags

    
.setup-deb-push: &setup-deb-push
    image: ${IMAGE}:16.04
    before_script:
        - eval $(ssh-agent -s)
        - ssh-add <(echo "${SSH_PRIVATE_KEY}")

push-debs:
    <<: *setup-deb-push
    stage: push
    script:
        - for CODENAME in xenial bionic; do scp -o StrictHostKeyChecking=no *${CODENAME}.deb ${DEBREPO}:/var/www/apt/${CODENAME}-stable; done
    only:
        - /^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$/
    except:
        - branches

push-external:
    <<: *setup-deb-push
    stage: push
    script:
        - for CODENAME in xenial bionic; do scp -o StrictHostKeyChecking=no *${CODENAME}.deb ${EXTERNALDEBREPO}:/mirror/apt/incoming/${CODENAME}-stable; done
    dependencies:
        - xenial-tag-colab
        - bionic-tag-colab
    only:
        - /^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$/
    except:
        - branches

